'use client'
import { useCallback, useEffect, useRef, useState } from 'react'
import { useEditor, EditorContent } from '@tiptap/react'
import StarterKit from '@tiptap/starter-kit'
import Underline from '@tiptap/extension-underline'
import Link from '@tiptap/extension-link'
import TextAlign from '@tiptap/extension-text-align'
import Image from '@tiptap/extension-image'
import Placeholder from '@tiptap/extension-placeholder'
// –°–ø–∏—Å–∫–∏ –∏–¥—É—Ç –∏–∑ StarterKit; –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
// –ü–æ–¥—Å–≤–µ—Ç–∫—É –∫–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π CodeBlock –∏–∑ StarterKit
import Table from '@tiptap/extension-table'
import TableRow from '@tiptap/extension-table-row'
import TableHeader from '@tiptap/extension-table-header'
import TableCell from '@tiptap/extension-table-cell'

type Props = {
  name: string
  defaultHtml?: string
  placeholder?: string
}

export default function RichEditor({ name, defaultHtml = '', placeholder }: Props) {
  const [html, setHtml] = useState<string>(defaultHtml)
  const hiddenRef = useRef<HTMLInputElement>(null)
  const editor = useEditor({
    content: defaultHtml,
    extensions: [
      // –ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      StarterKit,
      Underline,
      Link.configure({
        openOnClick: true,
        autolink: true,
        linkOnPaste: true,
        validate: (href) => /^https?:\/\//i.test(href) || href.startsWith('/') || href.startsWith('mailto:') || href.startsWith('tel:'),
      }),
      TextAlign.configure({ types: ['heading', 'paragraph'] }),
      Image.configure({
        inline: false,
        allowBase64: false,
        HTMLAttributes: { loading: 'lazy', style: 'display:block;max-width:100%;width:100%;height:auto;' },
      }),
      Placeholder.configure({ placeholder: placeholder || '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç‚Ä¶' }),
      Table.configure({ resizable: false }),
      TableRow,
      TableHeader,
      TableCell,
    ],
    // –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ SSR-–≥–∏–¥—Ä–∞—Ü–∏–∏ —Å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º DOM
    immediatelyRender: false,
    editorProps: {
      attributes: {
        class: 'prose max-w-none p-3 min-h-[220px] max-h-[65vh] overflow-y-auto border rounded focus:outline-none',
        'data-gramm': 'false',
        'data-gramm_editor': 'false',
        'data-enable-grammarly': 'false',
        spellCheck: 'false',
        autoCorrect: 'off',
        autoCapitalize: 'off',
      },
    },
    onUpdate: ({ editor }) => {
      setHtml(editor.getHTML())
      // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–≤–∞–∂–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Save –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤)
      setTimeout(() => {
        hiddenRef.current?.dispatchEvent(new Event('input', { bubbles: true }))
      }, 0)
    },
  })

  useEffect(() => {
    setHtml(editor?.getHTML() || defaultHtml)
  }, [editor, defaultHtml])

  const onImageUpload = useCallback(async () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = 'image/*'
    input.onchange = async () => {
      const file = input.files?.[0]
      if (!file) return
      // 1) –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase Storage
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: lectures/, news/, clients/<userId>/, etc.
      let dynPrefix = ''
      if (typeof (window as any).__uploadPrefix === 'function') dynPrefix = (window as any).__uploadPrefix()
      else if (typeof (window as any).__uploadPrefix === 'string') dynPrefix = (window as any).__uploadPrefix
      const params = new URLSearchParams(dynPrefix ? { prefix: dynPrefix } : {})
      const metaRes = await fetch('/api/storage/signed-upload' + (params.toString() ? `?${params.toString()}` : ''), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fileName: (file as any).name || 'image' })
      })
      if (!metaRes.ok) return
      const meta = await metaRes.json()
      // 2) –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –ø–æ signed URL
      const uploadRes = await fetch(meta.signedUrl, {
        method: 'PUT',
        headers: { 'x-upsert': 'true', 'content-type': (file as any).type || 'application/octet-stream', 'authorization': `Bearer ${meta.token}` },
        body: file,
      }).catch(() => null)
      // SDK signed upload Url use case: –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch –∫ https://.../object/sign/...?
      if (!uploadRes || !uploadRes.ok) {
        // fallback: –Ω–∞—à —Å—Ç–∞—Ä—ã–π API –∑–∞–≥—Ä—É–∑–∫–∏
        const form = new FormData()
        form.append('file', file)
        const upParams = params.toString() ? `?${params.toString()}` : ''
        const res = await fetch('/api/upload' + upParams, { method: 'POST', body: form })
        if (!res.ok) return
        const data = await res.json()
        editor?.chain().focus().setImage({ src: data.url }).run()
        return
      }
      // 3) –ò—Å–ø–æ–ª—å–∑—É–µ–º publicUrl –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const url = meta.publicUrl as string
      if (url) editor?.chain().focus().setImage({ src: url }).run()
    }
    input.click()
  }, [editor])

  const onSetLink = useCallback(() => {
    const prev = editor?.getAttributes('link').href as string | undefined
    const url = window.prompt('–°—Å—ã–ª–∫–∞ (–º–æ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å /galleries):', prev || '')
    if (url === null) return
    if (url === '') editor?.chain().focus().unsetLink().run()
    else editor?.chain().focus().setLink({ href: url.trim() }).run()
  }, [editor])

  const onUnsetFormatting = useCallback(() => {
    editor?.chain().focus().unsetAllMarks().clearNodes().run()
  }, [editor])

  return (
    <div className="space-y-2">
      <input ref={hiddenRef} type="hidden" name={name} value={html} readOnly />
      <div className="flex flex-wrap gap-2 text-sm">
        <button type="button" title="–ñ–∏—Ä–Ω—ã–π" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleBold().run()}>B</button>
        <button type="button" title="–ö—É—Ä—Å–∏–≤" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleItalic().run()}><i>I</i></button>
        <button type="button" title="–ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleUnderline().run()}><u>U</u></button>
        <button type="button" title="–ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleStrike().run()}>S</button>
        <span className="w-px h-5 bg-slate-300" />
        <button type="button" title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ H1" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleHeading({ level: 1 }).run()}>H1</button>
        <button type="button" title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ H2" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleHeading({ level: 2 }).run()}>H2</button>
        <button type="button" title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ H3" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleHeading({ level: 3 }).run()}>H3</button>
        <span className="w-px h-5 bg-slate-300" />
        <button type="button" title="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleBulletList().run()}>‚Ä¢</button>
        <button type="button" title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleOrderedList().run()}>1.</button>
        <span className="w-px h-5 bg-slate-300" />
        <button type="button" title="–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().setTextAlign('left').run()}>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round">
            <line x1="3" y1="6" x2="15" y2="6" />
            <line x1="3" y1="12" x2="21" y2="12" />
            <line x1="3" y1="18" x2="13" y2="18" />
          </svg>
        </button>
        <button type="button" title="–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ —Ü–µ–Ω—Ç—Ä—É" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().setTextAlign('center').run()}>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round">
            <line x1="5" y1="6" x2="19" y2="6" />
            <line x1="3" y1="12" x2="21" y2="12" />
            <line x1="7" y1="18" x2="17" y2="18" />
          </svg>
        </button>
        <button type="button" title="–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().setTextAlign('right').run()}>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round">
            <line x1="9" y1="6" x2="21" y2="6" />
            <line x1="3" y1="12" x2="21" y2="12" />
            <line x1="11" y1="18" x2="21" y2="18" />
          </svg>
        </button>
        <span className="w-px h-5 bg-slate-300" />
        <button type="button" title="–°—Å—ã–ª–∫–∞" className="px-2 py-1 border rounded" onClick={onSetLink}>üîó</button>
        <button type="button" title="–£–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫—É" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().unsetLink().run()}>üîó‚úñ</button>
        <button type="button" title="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" className="px-2 py-1 border rounded" onClick={onImageUpload}>üñºÔ∏è</button>
        <button type="button" title="–¶–∏—Ç–∞—Ç–∞" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleBlockquote().run()}>‚ùù</button>
        <button type="button" title="–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().setHorizontalRule().run()}>‚éØ‚éØ‚éØ</button>
        <span className="w-px h-5 bg-slate-300" />
        <button type="button" title="–ö–æ–¥–æ–≤—ã–π –±–ª–æ–∫" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().toggleCodeBlock().run()}>{'<>'}</button>
        <button type="button" title="–¢–∞–±–ª–∏—Ü–∞" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run()}>‚ñ¶</button>
        <button type="button" title="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().addRowAfter().run()}>ÔºãR</button>
        <button type="button" title="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().addColumnAfter().run()}>ÔºãC</button>
        <button type="button" title="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().deleteRow().run()}>‚àíR</button>
        <button type="button" title="–£–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().deleteColumn().run()}>‚àíC</button>
        <button type="button" title="–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().deleteTable().run()}>‚å´‚ñ¶</button>
        <span className="w-px h-5 bg-slate-300" />
        <button type="button" title="–û—Ç–º–µ–Ω–∏—Ç—å" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().undo().run()}>‚Ü∂</button>
        <button type="button" title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" className="px-2 py-1 border rounded" onClick={() => editor?.chain().focus().redo().run()}>‚Ü∑</button>
        <button type="button" title="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" className="px-2 py-1 border rounded" onClick={onUnsetFormatting}>‚úñ</button>
      </div>
      <EditorContent editor={editor} />
    </div>
  )
}


